[project]
name = "flash"
version = "0.1.1"
description = "A highly configurable multi-sided flashcard system for the command line that works with any CSV data"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Sam McVicker", email = "sammcvicker@protonmail.com"},
]
maintainers = [
    {name = "Sam McVicker", email = "sammcvicker@protonmail.com"},
]
keywords = [
    "flashcards",
    "cli",
    "csv",
    "learning",
    "study",
    "memorization",
    "text-to-speech",
    "education",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Education",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Education",
    "Topic :: Utilities",
]
dependencies = [
    "click>=8.1.8",
    "openai>=1.78.0",
]

[project.urls]
Homepage = "https://github.com/sammcvicker/flash"
Repository = "https://github.com/sammcvicker/flash"
Documentation = "https://github.com/sammcvicker/flash#readme"
"Bug Tracker" = "https://github.com/sammcvicker/flash/issues"
Changelog = "https://github.com/sammcvicker/flash/blob/main/CHANGELOG.md"

[project.scripts]
flash = "flash.cli:flash"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0",
    "pre-commit>=3.0.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["flash"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = [
    "--strict-markers",
    "-v"
]

[tool.ruff]
line-length = 88
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
